{"ast":null,"code":"// // App.js\n// import React, { useState, useRef } from 'react';\n// import './App.css';\n// import axios from 'axios'; // Import Axios\n// import SuccessPage from './SuccessPage'; // Import the SuccessPage component\n\n// function App() {\n//   const [videoStream, setVideoStream] = useState(null);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const nameInputRef = useRef(null);\n//   const [isLoggedIn, setLoggedIn] = useState(false);\n//   const [userName, setUserName] = useState('');\n\n//   const initWebcam = () => {\n//     stopWebcam();\n\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then(stream => {\n//         setVideoStream(stream);\n//         videoRef.current.srcObject = stream;\n//       })\n//       .catch(handleWebcamError);\n//   };\n\n//   const handleWebcamError = (error) => {\n//     console.error('Error accessing webcam:', error.name, error.message);\n//     alert('Cannot access webcam. Please grant permission.');\n//   };\n\n//   const stopWebcam = () => {\n//     if (videoStream) {\n//       const tracks = videoStream.getTracks();\n//       tracks.forEach(track => track.stop());\n//       setVideoStream(null);\n//       videoRef.current.srcObject = null;\n//     }\n//   };\n\n//   const capture = () => {\n//     const context = canvasRef.current.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n//     canvasRef.current.style.display = 'block';\n//     videoRef.current.style.display = 'none';\n//     stopWebcam();\n//   };\n\n//   const register = () => {\n//     const name = nameInputRef.current.value;\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!name || !photo) {\n//       alert('Name and photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('name', name);\n//     formData.append('photo', photo, `${name}.jpg`);\n\n//     axios.post('http://localhost:8000/register/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Data successfully registered');\n//           window.location.href = '/';\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const login = () => {\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!photo) {\n//       alert('Photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('photo', photo, 'login.jpg');\n\n//     axios.post('http://localhost:8000/login/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Login successful');\n//           setUserName(nameInputRef.current.value);\n//           setLoggedIn(true);\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const dataURItoBlob = (dataURI) => {\n//     const byteString = atob(dataURI.split(',')[1]);\n//     const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n//     const ab = new ArrayBuffer(byteString.length);\n//     const ia = new Uint8Array(ab);\n//     for (let i = 0; i < byteString.length; i++) {\n//       ia[i] = byteString.charCodeAt(i);\n//     }\n//     return new Blob([ab], { type: mimeString });\n//   };\n\n//   const renderContent = () => {\n//     if (isLoggedIn) {\n//       // Render the SuccessPage component if logged in\n//       return <SuccessPage userName={userName} />;\n//     } else {\n//       // Render the login form if not logged in\n//       return (\n//         <div className = \"container1\">\n//           <h1>Face Recognition</h1> {/*change to Face Recognition*/}\n//           <div className='input'>\n//           <label htmlFor=\"name\">Name :  </label>\n//           <span><input type=\"text\" id=\"name\" ref={nameInputRef} required /></span>\n//           <br />\n//           </div>\n//           <video id=\"video\" width=\"520\" height=\"400\" autoPlay ref={videoRef}></video>\n//           <br />\n//           <canvas id=\"canvas\" width=\"520\" height=\"400\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n//           <br />\n//           <span><button onClick={initWebcam}>Start Webcam</button><button onClick={capture}>Capture Photo</button></span>\n//           <br />\n//           <span><button onClick={register}>Register</button><button onClick={login}>Login</button></span>\n//         </div>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {renderContent()}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// App.js\n// import React, { useState, useRef } from 'react';\n// import './App.css';\n// import axios from 'axios'; // Import Axios\n// import SuccessPage from './SuccessPage'; // Import the SuccessPage component\n\n// function App() {\n//   const [videoStream, setVideoStream] = useState(null);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const nameInputRef = useRef(null);\n//   const [isLoggedIn, setLoggedIn] = useState(false);\n//   const [userName, setUserName] = useState('');\n//   const [currentPage, setCurrentPage] = useState(null);\n\n//   const initWebcam = () => {\n//     stopWebcam();\n\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then(stream => {\n//         setVideoStream(stream);\n//         videoRef.current.srcObject = stream;\n//       })\n//       .catch(handleWebcamError);\n//   };\n\n//   const handleWebcamError = (error) => {\n//     console.error('Error accessing webcam:', error.name, error.message);\n//     alert('Cannot access webcam. Please grant permission.');\n//   };\n\n//   const stopWebcam = () => {\n//     if (videoStream) {\n//       const tracks = videoStream.getTracks();\n//       tracks.forEach(track => track.stop());\n//       setVideoStream(null);\n//       videoRef.current.srcObject = null;\n//     }\n//   };\n\n//   const capture = () => {\n//     const context = canvasRef.current.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n//     canvasRef.current.style.display = 'block';\n//     videoRef.current.style.display = 'none';\n//     stopWebcam();\n//   };\n\n//   const register = () => {\n//     const name = nameInputRef.current.value;\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!name || !photo) {\n//       alert('Name and photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('name', name);\n//     formData.append('photo', photo, `${name}.jpg`);\n\n//     axios.post('http://localhost:8000/register/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Data successfully registered');\n//           window.location.href = '/';\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const login = () => {\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!photo) {\n//       alert('Photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('photo', photo, 'login.jpg');\n\n//     axios.post('http://localhost:8000/login/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Login successful');\n//           setUserName(nameInputRef.current.value);\n//           setLoggedIn(true);\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const dataURItoBlob = (dataURI) => {\n//     const byteString = atob(dataURI.split(',')[1]);\n//     const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n//     const ab = new ArrayBuffer(byteString.length);\n//     const ia = new Uint8Array(ab);\n//     for (let i = 0; i < byteString.length; i++) {\n//       ia[i] = byteString.charCodeAt(i);\n//     }\n//     return new Blob([ab], { type: mimeString });\n//   };\n\n//   const Rpage = () =>{\n//     return(\n//       <div>\n//           <h1>Face Recognition</h1>\n//           <label htmlFor=\"name\">Name:</label>\n//           <input type=\"text\" id=\"name\" ref={nameInputRef} required />\n//           <br />\n//           <video id=\"video\" width=\"640\" height=\"480\" autoPlay ref={videoRef}></video>\n//           <br />\n//           <button onClick={initWebcam}>Start Webcam</button>\n//           <button onClick={capture}>Capture Photo</button>\n//           <br />\n//           <canvas id=\"canvas\" width=\"640\" height=\"480\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n//           <br />\n//           <button onClick={register}>Register</button>\n//       </div>\n//     )\n//   }\n\n//   const Lpage = () =>{\n//     return(\n//       <div>\n//           <h1>Face Recognition</h1>\n//           <label htmlFor=\"name\">Name:</label>\n//           <input type=\"text\" id=\"name\" ref={nameInputRef} required />\n//           <br />\n//           <video id=\"video\" width=\"640\" height=\"480\" autoPlay ref={videoRef}></video>\n//           <br />\n//           <button onClick={initWebcam}>Start Webcam</button>\n//           <button onClick={capture}>Capture Photo</button>\n//           <br />\n//           <canvas id=\"canvas\" width=\"640\" height=\"480\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n//           <br />\n//           <button onClick={login}>Login</button>\n//       </div>\n//     )\n//   }\n\n//   const renderContent = () => {\n//     if (isLoggedIn) {\n//       // Render the SuccessPage component if logged in\n//       return <SuccessPage userName={userName} />;\n//     } else {\n//       // Render the login form if not logged in\n//       if (currentPage === 'register') {\n//         return <Rpage />;\n//       } else if (currentPage === 'login') {\n//         return <Lpage />;\n//       } else {\n//         return (\n//           <div className = \"container\">\n//             <h1>Face Recognition</h1>\n//             <div className = \"button\">\n//             <button onClick={() => setCurrentPage('register')}>Register</button>\n//             <button onClick={() => setCurrentPage('login')}>Login</button>\n//             </div>\n//           </div>\n//         );\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {renderContent()}\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/sahil/Programming/Projects/Django Project/Project 1/frontend/src/App.js"],"sourcesContent":["// // App.js\n// import React, { useState, useRef } from 'react';\n// import './App.css';\n// import axios from 'axios'; // Import Axios\n// import SuccessPage from './SuccessPage'; // Import the SuccessPage component\n\n// function App() {\n//   const [videoStream, setVideoStream] = useState(null);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const nameInputRef = useRef(null);\n//   const [isLoggedIn, setLoggedIn] = useState(false);\n//   const [userName, setUserName] = useState('');\n\n//   const initWebcam = () => {\n//     stopWebcam();\n\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then(stream => {\n//         setVideoStream(stream);\n//         videoRef.current.srcObject = stream;\n//       })\n//       .catch(handleWebcamError);\n//   };\n\n//   const handleWebcamError = (error) => {\n//     console.error('Error accessing webcam:', error.name, error.message);\n//     alert('Cannot access webcam. Please grant permission.');\n//   };\n\n//   const stopWebcam = () => {\n//     if (videoStream) {\n//       const tracks = videoStream.getTracks();\n//       tracks.forEach(track => track.stop());\n//       setVideoStream(null);\n//       videoRef.current.srcObject = null;\n//     }\n//   };\n\n//   const capture = () => {\n//     const context = canvasRef.current.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n//     canvasRef.current.style.display = 'block';\n//     videoRef.current.style.display = 'none';\n//     stopWebcam();\n//   };\n\n//   const register = () => {\n//     const name = nameInputRef.current.value;\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!name || !photo) {\n//       alert('Name and photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('name', name);\n//     formData.append('photo', photo, `${name}.jpg`);\n\n//     axios.post('http://localhost:8000/register/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Data successfully registered');\n//           window.location.href = '/';\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const login = () => {\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!photo) {\n//       alert('Photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('photo', photo, 'login.jpg');\n\n//     axios.post('http://localhost:8000/login/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Login successful');\n//           setUserName(nameInputRef.current.value);\n//           setLoggedIn(true);\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n\n//   const dataURItoBlob = (dataURI) => {\n//     const byteString = atob(dataURI.split(',')[1]);\n//     const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n//     const ab = new ArrayBuffer(byteString.length);\n//     const ia = new Uint8Array(ab);\n//     for (let i = 0; i < byteString.length; i++) {\n//       ia[i] = byteString.charCodeAt(i);\n//     }\n//     return new Blob([ab], { type: mimeString });\n//   };\n\n\n//   const renderContent = () => {\n//     if (isLoggedIn) {\n//       // Render the SuccessPage component if logged in\n//       return <SuccessPage userName={userName} />;\n//     } else {\n//       // Render the login form if not logged in\n//       return (\n//         <div className = \"container1\">\n//           <h1>Face Recognition</h1> {/*change to Face Recognition*/}\n//           <div className='input'>\n//           <label htmlFor=\"name\">Name :  </label>\n//           <span><input type=\"text\" id=\"name\" ref={nameInputRef} required /></span>\n//           <br />\n//           </div>\n//           <video id=\"video\" width=\"520\" height=\"400\" autoPlay ref={videoRef}></video>\n//           <br />\n//           <canvas id=\"canvas\" width=\"520\" height=\"400\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n//           <br />\n//           <span><button onClick={initWebcam}>Start Webcam</button><button onClick={capture}>Capture Photo</button></span>\n//           <br />\n//           <span><button onClick={register}>Register</button><button onClick={login}>Login</button></span>\n//         </div>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {renderContent()}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n// App.js\n// import React, { useState, useRef } from 'react';\n// import './App.css';\n// import axios from 'axios'; // Import Axios\n// import SuccessPage from './SuccessPage'; // Import the SuccessPage component\n\n// function App() {\n//   const [videoStream, setVideoStream] = useState(null);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const nameInputRef = useRef(null);\n//   const [isLoggedIn, setLoggedIn] = useState(false);\n//   const [userName, setUserName] = useState('');\n//   const [currentPage, setCurrentPage] = useState(null);\n\n//   const initWebcam = () => {\n//     stopWebcam();\n\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then(stream => {\n//         setVideoStream(stream);\n//         videoRef.current.srcObject = stream;\n//       })\n//       .catch(handleWebcamError);\n//   };\n\n//   const handleWebcamError = (error) => {\n//     console.error('Error accessing webcam:', error.name, error.message);\n//     alert('Cannot access webcam. Please grant permission.');\n//   };\n\n//   const stopWebcam = () => {\n//     if (videoStream) {\n//       const tracks = videoStream.getTracks();\n//       tracks.forEach(track => track.stop());\n//       setVideoStream(null);\n//       videoRef.current.srcObject = null;\n//     }\n//   };\n\n//   const capture = () => {\n//     const context = canvasRef.current.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n//     canvasRef.current.style.display = 'block';\n//     videoRef.current.style.display = 'none';\n//     stopWebcam();\n//   };\n\n//   const register = () => {\n//     const name = nameInputRef.current.value;\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!name || !photo) {\n//       alert('Name and photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('name', name);\n//     formData.append('photo', photo, `${name}.jpg`);\n\n//     axios.post('http://localhost:8000/register/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Data successfully registered');\n//           window.location.href = '/';\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const login = () => {\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!photo) {\n//       alert('Photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('photo', photo, 'login.jpg');\n\n//     axios.post('http://localhost:8000/login/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Login successful');\n//           setUserName(nameInputRef.current.value);\n//           setLoggedIn(true);\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n\n//   const dataURItoBlob = (dataURI) => {\n//     const byteString = atob(dataURI.split(',')[1]);\n//     const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n//     const ab = new ArrayBuffer(byteString.length);\n//     const ia = new Uint8Array(ab);\n//     for (let i = 0; i < byteString.length; i++) {\n//       ia[i] = byteString.charCodeAt(i);\n//     }\n//     return new Blob([ab], { type: mimeString });\n//   };\n\n//   const Rpage = () =>{\n//     return(\n//       <div>\n//           <h1>Face Recognition</h1>\n//           <label htmlFor=\"name\">Name:</label>\n//           <input type=\"text\" id=\"name\" ref={nameInputRef} required />\n//           <br />\n//           <video id=\"video\" width=\"640\" height=\"480\" autoPlay ref={videoRef}></video>\n//           <br />\n//           <button onClick={initWebcam}>Start Webcam</button>\n//           <button onClick={capture}>Capture Photo</button>\n//           <br />\n//           <canvas id=\"canvas\" width=\"640\" height=\"480\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n//           <br />\n//           <button onClick={register}>Register</button>\n//       </div>\n//     )\n//   }\n\n//   const Lpage = () =>{\n//     return(\n//       <div>\n//           <h1>Face Recognition</h1>\n//           <label htmlFor=\"name\">Name:</label>\n//           <input type=\"text\" id=\"name\" ref={nameInputRef} required />\n//           <br />\n//           <video id=\"video\" width=\"640\" height=\"480\" autoPlay ref={videoRef}></video>\n//           <br />\n//           <button onClick={initWebcam}>Start Webcam</button>\n//           <button onClick={capture}>Capture Photo</button>\n//           <br />\n//           <canvas id=\"canvas\" width=\"640\" height=\"480\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n//           <br />\n//           <button onClick={login}>Login</button>\n//       </div>\n//     )\n//   }\n\n//   const renderContent = () => {\n//     if (isLoggedIn) {\n//       // Render the SuccessPage component if logged in\n//       return <SuccessPage userName={userName} />;\n//     } else {\n//       // Render the login form if not logged in\n//       if (currentPage === 'register') {\n//         return <Rpage />;\n//       } else if (currentPage === 'login') {\n//         return <Lpage />;\n//       } else {\n//         return (\n//           <div className = \"container\">\n//             <h1>Face Recognition</h1>\n//             <div className = \"button\">\n//             <button onClick={() => setCurrentPage('register')}>Register</button>\n//             <button onClick={() => setCurrentPage('login')}>Login</button>\n//             </div>\n//           </div>\n//         );\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {renderContent()}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}