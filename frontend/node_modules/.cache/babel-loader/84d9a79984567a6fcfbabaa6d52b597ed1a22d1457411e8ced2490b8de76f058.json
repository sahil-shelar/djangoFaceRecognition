{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\Programming\\\\Projects\\\\Django Project\\\\Project 1\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// // App.js\n// import React, { useState, useRef } from 'react';\n// import './App.css';\n// import axios from 'axios'; // Import Axios\n// import SuccessPage from './SuccessPage'; // Import the SuccessPage component\n\n// function App() {\n//   const [videoStream, setVideoStream] = useState(null);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const nameInputRef = useRef(null);\n//   const [isLoggedIn, setLoggedIn] = useState(false);\n//   const [userName, setUserName] = useState('');\n\n//   const initWebcam = () => {\n//     stopWebcam();\n\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then(stream => {\n//         setVideoStream(stream);\n//         videoRef.current.srcObject = stream;\n//       })\n//       .catch(handleWebcamError);\n//   };\n\n//   const handleWebcamError = (error) => {\n//     console.error('Error accessing webcam:', error.name, error.message);\n//     alert('Cannot access webcam. Please grant permission.');\n//   };\n\n//   const stopWebcam = () => {\n//     if (videoStream) {\n//       const tracks = videoStream.getTracks();\n//       tracks.forEach(track => track.stop());\n//       setVideoStream(null);\n//       videoRef.current.srcObject = null;\n//     }\n//   };\n\n//   const capture = () => {\n//     const context = canvasRef.current.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n//     canvasRef.current.style.display = 'block';\n//     videoRef.current.style.display = 'none';\n//     stopWebcam();\n//   };\n\n//   const register = () => {\n//     const name = nameInputRef.current.value;\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!name || !photo) {\n//       alert('Name and photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('name', name);\n//     formData.append('photo', photo, `${name}.jpg`);\n\n//     axios.post('http://localhost:8000/register/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Data successfully registered');\n//           window.location.href = '/';\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const login = () => {\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!photo) {\n//       alert('Photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('photo', photo, 'login.jpg');\n\n//     axios.post('http://localhost:8000/login/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Login successful');\n//           setUserName(nameInputRef.current.value);\n//           setLoggedIn(true);\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const dataURItoBlob = (dataURI) => {\n//     const byteString = atob(dataURI.split(',')[1]);\n//     const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n//     const ab = new ArrayBuffer(byteString.length);\n//     const ia = new Uint8Array(ab);\n//     for (let i = 0; i < byteString.length; i++) {\n//       ia[i] = byteString.charCodeAt(i);\n//     }\n//     return new Blob([ab], { type: mimeString });\n//   };\n\n//   const renderContent = () => {\n//     if (isLoggedIn) {\n//       // Render the SuccessPage component if logged in\n//       return <SuccessPage userName={userName} />;\n//     } else {\n//       // Render the login form if not logged in\n//       return (\n//         <div>\n//           <h1>Face Recognition</h1>\n//           <label htmlFor=\"name\">Name:</label>\n//           <input type=\"text\" id=\"name\" ref={nameInputRef} required />\n//           <br />\n//           <video id=\"video\" width=\"640\" height=\"480\" autoPlay ref={videoRef}></video>\n//           <br />\n//           <button onClick={initWebcam}>Start Webcam</button>\n//           <button onClick={capture}>Capture Photo</button>\n//           <br />\n//           <canvas id=\"canvas\" width=\"640\" height=\"480\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n//           <br />\n//           <button onClick={register}>Register</button>\n//           <button onClick={login}>Login</button>\n//         </div>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {renderContent()}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// App.js\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport axios from 'axios'; // Import Axios\nimport SuccessPage from './SuccessPage'; // Import the SuccessPage component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoStream, setVideoStream] = useState(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const nameInputRef = useRef(null);\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const [userName, setUserName] = useState('');\n  const initWebcam = () => {\n    stopWebcam();\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(stream => {\n      setVideoStream(stream);\n      videoRef.current.srcObject = stream;\n    }).catch(handleWebcamError);\n  };\n  const handleWebcamError = error => {\n    console.error('Error accessing webcam:', error.name, error.message);\n    alert('Cannot access webcam. Please grant permission.');\n  };\n  const stopWebcam = () => {\n    if (videoStream) {\n      const tracks = videoStream.getTracks();\n      tracks.forEach(track => track.stop());\n      setVideoStream(null);\n      videoRef.current.srcObject = null;\n    }\n  };\n  const capture = () => {\n    const context = canvasRef.current.getContext('2d');\n    context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n    canvasRef.current.style.display = 'block';\n    videoRef.current.style.display = 'none';\n    stopWebcam();\n  };\n  const register = () => {\n    const name = nameInputRef.current.value;\n    const photo = dataURItoBlob(canvasRef.current.toDataURL());\n    if (!name || !photo) {\n      alert('Name and photo required');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('photo', photo, `${name}.jpg`);\n    axios.post('http://localhost:8000/register/', formData).then(response => {\n      const data = response.data;\n      if (data.success) {\n        alert('Data successfully registered');\n        window.location.href = '/';\n      } else {\n        alert('Failed');\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const login = () => {\n    const photo = dataURItoBlob(canvasRef.current.toDataURL());\n    if (!photo) {\n      alert('Photo required');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('photo', photo, 'login.jpg');\n    axios.post('http://localhost:8000/login/', formData).then(response => {\n      const data = response.data;\n      if (data.success) {\n        alert('Login successful');\n        setUserName(nameInputRef.current.value);\n        setLoggedIn(true);\n      } else {\n        alert('Failed');\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const dataURItoBlob = dataURI => {\n    const byteString = atob(dataURI.split(',')[1]);\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], {\n      type: mimeString\n    });\n  };\n  const Rpage = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Face Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"video\",\n        width: \"640\",\n        height: \"480\",\n        autoPlay: true,\n        ref: videoRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: initWebcam,\n        children: \"Start Webcam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: capture,\n        children: \"Capture Photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas\",\n        width: \"640\",\n        height: \"480\",\n        style: {\n          display: 'none'\n        },\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: register,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this);\n  };\n  const Lpage = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Face Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"video\",\n        width: \"640\",\n        height: \"480\",\n        autoPlay: true,\n        ref: videoRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: initWebcam,\n        children: \"Start Webcam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: capture,\n        children: \"Capture Photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas\",\n        width: \"640\",\n        height: \"480\",\n        style: {\n          display: 'none'\n        },\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: login,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this);\n  };\n  const renderContent = () => {\n    if (isLoggedIn) {\n      // Render the SuccessPage component if logged in\n      return /*#__PURE__*/_jsxDEV(SuccessPage, {\n        userName: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 14\n      }, this);\n    } else {\n      // Render the login form if not logged in\n      if (currentPage === 'register') {\n        return /*#__PURE__*/_jsxDEV(Rpage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 16\n        }, this);\n      } else if (currentPage === 'login') {\n        return /*#__PURE__*/_jsxDEV(Lpage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Face Recognition\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setCurrentPage('register'),\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setCurrentPage('login'),\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LyWKl5Yo0hJke/+aWyqtF2ZLPQo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","axios","SuccessPage","jsxDEV","_jsxDEV","App","_s","videoStream","setVideoStream","videoRef","canvasRef","nameInputRef","isLoggedIn","setLoggedIn","userName","setUserName","initWebcam","stopWebcam","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","catch","handleWebcamError","error","console","name","message","alert","tracks","getTracks","forEach","track","stop","capture","context","getContext","drawImage","width","height","style","display","register","value","photo","dataURItoBlob","toDataURL","formData","FormData","append","post","response","data","success","window","location","href","login","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","Rpage","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","ref","required","autoPlay","onClick","Lpage","renderContent","currentPage","className","setCurrentPage","_c","$RefreshReg$"],"sources":["C:/Users/sahil/Programming/Projects/Django Project/Project 1/frontend/src/App.js"],"sourcesContent":["// // App.js\n// import React, { useState, useRef } from 'react';\n// import './App.css';\n// import axios from 'axios'; // Import Axios\n// import SuccessPage from './SuccessPage'; // Import the SuccessPage component\n\n// function App() {\n//   const [videoStream, setVideoStream] = useState(null);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const nameInputRef = useRef(null);\n//   const [isLoggedIn, setLoggedIn] = useState(false);\n//   const [userName, setUserName] = useState('');\n\n//   const initWebcam = () => {\n//     stopWebcam();\n\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then(stream => {\n//         setVideoStream(stream);\n//         videoRef.current.srcObject = stream;\n//       })\n//       .catch(handleWebcamError);\n//   };\n\n//   const handleWebcamError = (error) => {\n//     console.error('Error accessing webcam:', error.name, error.message);\n//     alert('Cannot access webcam. Please grant permission.');\n//   };\n\n//   const stopWebcam = () => {\n//     if (videoStream) {\n//       const tracks = videoStream.getTracks();\n//       tracks.forEach(track => track.stop());\n//       setVideoStream(null);\n//       videoRef.current.srcObject = null;\n//     }\n//   };\n\n//   const capture = () => {\n//     const context = canvasRef.current.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n//     canvasRef.current.style.display = 'block';\n//     videoRef.current.style.display = 'none';\n//     stopWebcam();\n//   };\n\n//   const register = () => {\n//     const name = nameInputRef.current.value;\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!name || !photo) {\n//       alert('Name and photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('name', name);\n//     formData.append('photo', photo, `${name}.jpg`);\n\n//     axios.post('http://localhost:8000/register/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Data successfully registered');\n//           window.location.href = '/';\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const login = () => {\n//     const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n//     if (!photo) {\n//       alert('Photo required');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('photo', photo, 'login.jpg');\n\n//     axios.post('http://localhost:8000/login/', formData)\n//       .then(response => {\n//         const data = response.data;\n//         if (data.success) {\n//           alert('Login successful');\n//           setUserName(nameInputRef.current.value);\n//           setLoggedIn(true);\n//         } else {\n//           alert('Failed');\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n\n//   const dataURItoBlob = (dataURI) => {\n//     const byteString = atob(dataURI.split(',')[1]);\n//     const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n//     const ab = new ArrayBuffer(byteString.length);\n//     const ia = new Uint8Array(ab);\n//     for (let i = 0; i < byteString.length; i++) {\n//       ia[i] = byteString.charCodeAt(i);\n//     }\n//     return new Blob([ab], { type: mimeString });\n//   };\n\n\n//   const renderContent = () => {\n//     if (isLoggedIn) {\n//       // Render the SuccessPage component if logged in\n//       return <SuccessPage userName={userName} />;\n//     } else {\n//       // Render the login form if not logged in\n//       return (\n//         <div>\n//           <h1>Face Recognition</h1>\n//           <label htmlFor=\"name\">Name:</label>\n//           <input type=\"text\" id=\"name\" ref={nameInputRef} required />\n//           <br />\n//           <video id=\"video\" width=\"640\" height=\"480\" autoPlay ref={videoRef}></video>\n//           <br />\n//           <button onClick={initWebcam}>Start Webcam</button>\n//           <button onClick={capture}>Capture Photo</button>\n//           <br />\n//           <canvas id=\"canvas\" width=\"640\" height=\"480\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n//           <br />\n//           <button onClick={register}>Register</button>\n//           <button onClick={login}>Login</button>\n//         </div>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {renderContent()}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n// App.js\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport axios from 'axios'; // Import Axios\nimport SuccessPage from './SuccessPage'; // Import the SuccessPage component\n\nfunction App() {\n  const [videoStream, setVideoStream] = useState(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const nameInputRef = useRef(null);\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const [userName, setUserName] = useState('');\n\n  const initWebcam = () => {\n    stopWebcam();\n\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then(stream => {\n        setVideoStream(stream);\n        videoRef.current.srcObject = stream;\n      })\n      .catch(handleWebcamError);\n  };\n\n  const handleWebcamError = (error) => {\n    console.error('Error accessing webcam:', error.name, error.message);\n    alert('Cannot access webcam. Please grant permission.');\n  };\n\n  const stopWebcam = () => {\n    if (videoStream) {\n      const tracks = videoStream.getTracks();\n      tracks.forEach(track => track.stop());\n      setVideoStream(null);\n      videoRef.current.srcObject = null;\n    }\n  };\n\n  const capture = () => {\n    const context = canvasRef.current.getContext('2d');\n    context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);\n    canvasRef.current.style.display = 'block';\n    videoRef.current.style.display = 'none';\n    stopWebcam();\n  };\n\n  const register = () => {\n    const name = nameInputRef.current.value;\n    const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n    if (!name || !photo) {\n      alert('Name and photo required');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('photo', photo, `${name}.jpg`);\n\n    axios.post('http://localhost:8000/register/', formData)\n      .then(response => {\n        const data = response.data;\n        if (data.success) {\n          alert('Data successfully registered');\n          window.location.href = '/';\n        } else {\n          alert('Failed');\n        }\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  };\n\n  const login = () => {\n    const photo = dataURItoBlob(canvasRef.current.toDataURL());\n\n    if (!photo) {\n      alert('Photo required');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('photo', photo, 'login.jpg');\n\n    axios.post('http://localhost:8000/login/', formData)\n      .then(response => {\n        const data = response.data;\n        if (data.success) {\n          alert('Login successful');\n          setUserName(nameInputRef.current.value);\n          setLoggedIn(true);\n        } else {\n          alert('Failed');\n        }\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  };\n\n\n  const dataURItoBlob = (dataURI) => {\n    const byteString = atob(dataURI.split(',')[1]);\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], { type: mimeString });\n  };\n\n  const Rpage = () =>{\n    return(\n      <div>\n          <h1>Face Recognition</h1>\n          <label htmlFor=\"name\">Name:</label>\n          <input type=\"text\" id=\"name\" ref={nameInputRef} required />\n          <br />\n          <video id=\"video\" width=\"640\" height=\"480\" autoPlay ref={videoRef}></video>\n          <br />\n          <button onClick={initWebcam}>Start Webcam</button>\n          <button onClick={capture}>Capture Photo</button>\n          <br />\n          <canvas id=\"canvas\" width=\"640\" height=\"480\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n          <br />\n          <button onClick={register}>Register</button>\n      </div>\n    )\n  }\n\n  const Lpage = () =>{\n    return(\n      <div>\n          <h1>Face Recognition</h1>\n          <label htmlFor=\"name\">Name:</label>\n          <input type=\"text\" id=\"name\" ref={nameInputRef} required />\n          <br />\n          <video id=\"video\" width=\"640\" height=\"480\" autoPlay ref={videoRef}></video>\n          <br />\n          <button onClick={initWebcam}>Start Webcam</button>\n          <button onClick={capture}>Capture Photo</button>\n          <br />\n          <canvas id=\"canvas\" width=\"640\" height=\"480\" style={{ display: 'none' }} ref={canvasRef}></canvas>\n          <br />\n          <button onClick={login}>Login</button>\n      </div>\n    )\n  }\n\n  const renderContent = () => {\n    if (isLoggedIn) {\n      // Render the SuccessPage component if logged in\n      return <SuccessPage userName={userName} />;\n    } else {\n      // Render the login form if not logged in\n      if (currentPage === 'register') {\n        return <Rpage />;\n      } else if (currentPage === 'login') {\n        return <Lpage />;\n      } else {\n        return (\n          <div className = \"container\">\n            <h1>Face Recognition</h1>\n            <div className = \"button\">\n            <button onClick={() => setCurrentPage('register')}>Register</button>\n            <button onClick={() => setCurrentPage('login')}>Login</button>\n            </div>\n          </div>\n        );\n      }\n    }\n  };\n\n  return (\n    <div>\n      {renderContent()}\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMU,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMU,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMW,YAAY,GAAGX,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACY,UAAU,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE5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"},"metadata":{},"sourceType":"module","externalDependencies":[]}